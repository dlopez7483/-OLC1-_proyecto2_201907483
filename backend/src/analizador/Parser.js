/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[1,12],$V2=[1,13],$V3=[1,28],$V4=[1,22],$V5=[1,23],$V6=[1,24],$V7=[1,25],$V8=[1,26],$V9=[1,27],$Va=[2,5,18,23,96,102,110,113,122,127,129],$Vb=[2,5,15,18,20,23,25,52,53,54,58,59,61,64,96,97,101,102,103,110,113,122,127,129],$Vc=[1,33],$Vd=[1,53],$Ve=[1,47],$Vf=[1,52],$Vg=[1,51],$Vh=[1,50],$Vi=[1,49],$Vj=[1,45],$Vk=[1,46],$Vl=[1,48],$Vm=[1,66],$Vn=[1,73],$Vo=[1,69],$Vp=[1,65],$Vq=[1,57],$Vr=[1,58],$Vs=[1,59],$Vt=[1,60],$Vu=[1,62],$Vv=[1,67],$Vw=[1,68],$Vx=[1,71],$Vy=[1,72],$Vz=[1,74],$VA=[1,75],$VB=[1,76],$VC=[1,77],$VD=[1,78],$VE=[1,79],$VF=[1,80],$VG=[18,20,23,25,54,58,59,61,64,96,97,101,102,103,110,113,122,127,129],$VH=[15,18,20,23,25,52,53,54,58,59,61,64,96,97,101,102,103,110,113,122,127,129],$VI=[1,94],$VJ=[1,101],$VK=[1,107],$VL=[17,22,28,37,125],$VM=[1,110],$VN=[1,109],$VO=[1,111],$VP=[1,112],$VQ=[1,113],$VR=[1,114],$VS=[1,115],$VT=[1,116],$VU=[1,117],$VV=[1,118],$VW=[1,119],$VX=[1,120],$VY=[1,121],$VZ=[15,17,18,20,22,23,25,28,37,52,53,54,55,57,58,59,61,62,63,64,76,77,78,79,80,81,82,83,84,85,86,87,88,96,97,101,102,103,110,113,122,125,126,127,129],$V_=[1,143],$V$=[17,37],$V01=[1,159],$V11=[15,17,18,20,22,23,25,28,37,52,53,54,55,57,58,59,61,62,63,64,87,88,96,97,101,102,103,110,113,122,125,126,127,129],$V21=[1,203],$V31=[22,28,37],$V41=[1,211],$V51=[15,18,20,23,25,37,52,53,54,58,59,61,64,96,97,101,102,103,110,113,122,126,127,129],$V61=[1,226],$V71=[1,227],$V81=[15,17,18,20,22,23,25,28,37,52,53,54,55,57,58,59,61,62,63,64,76,77,81,82,83,84,85,86,87,88,96,97,101,102,103,110,113,122,125,126,127,129],$V91=[15,17,18,20,22,23,25,28,37,52,53,54,55,57,58,59,61,62,63,64,81,82,83,84,85,86,87,88,96,97,101,102,103,110,113,122,125,126,127,129],$Va1=[37,126],$Vb1=[28,37],$Vc1=[18,20,23,25,52,53,54,58,59,64,96,97,101,102,103,110,113,122,127,129],$Vd1=[61,62],$Ve1=[1,365],$Vf1=[15,18,20,23,25,54,58,59,64,96,97,101,102,103,110,113,122,127,129];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"lista_instrucciones_general":4,"EOF":5,"instruccion_general":6,"instrucciom_ddl_dml":7,"funcion":8,"procedimiento":9,"encapsulamiento":10,"instrucciones_funciones":11,"instruccion_funciones":12,"instruccion":13,"return":14,"RETURN":15,"expresion":16,"PYC":17,"CREATE":18,"PROCEDIMIENTO":19,"ID_NORMAL":20,"lista_parametros":21,"AS":22,"BEGIN":23,"lista_instrucciones":24,"END":25,"FUNCTION":26,"PARIZQ":27,"PARDER":28,"RETURNS":29,"tipo_val":30,"INT":31,"DOUBLE":32,"DATE_P":33,"VARCHAR":34,"BOOLEAN":35,"NULL":36,"COMA":37,"parametro":38,"ID_VARIABLES":39,"declaracion":40,"asignacion":41,"impresion_print":42,"if":43,"case":44,"while":45,"for":46,"sentencia_ddl":47,"sentencia_dml":48,"impresion_select":49,"instrucciones_loop":50,"instruccion_loop":51,"BREAK":52,"CONTINUE":53,"FOR":54,"IN":55,"rango":56,"PUNTO":57,"WHILE":58,"CASE":59,"lista_when":60,"ELSE":61,"WHEN":62,"THEN":63,"IF":64,"ENTERO":65,"DECIMAL":66,"CADENA":67,"CADENA_S":68,"funcion_primitiva":69,"DATE":70,"llamada":71,"casteo":72,"TRUE":73,"FALSE":74,"select_agrupacion":75,"MENOS":76,"MAS":77,"POR":78,"DIV":79,"MOD":80,"MENOR":81,"MAYOR":82,"MENORIGUAL":83,"MAYORIGUAL":84,"DIFERENTE":85,"IGUAL":86,"AND":87,"OR":88,"NOT":89,"lista_valores":90,"LOWER":91,"UPPER":92,"ROUND":93,"LEN":94,"TYPEOF":95,"TRUNCATE":96,"DECLARE":97,"declaracion_multiple":98,"declaracion_simple":99,"DEFAULT":100,"SET":101,"SELECT":102,"PRINT":103,"sentencia_create":104,"sentencia_alter":105,"sentencia_drop":106,"TABLE":107,"lista_columnas":108,"columna":109,"ALTER":110,"sentencia_alter_opciones":111,"ADD":112,"DROP":113,"COLUMN":114,"RENAME":115,"TO":116,"sentencia_insert":117,"sentencia_update":118,"sentencia_delete":119,"sentencia_truncate":120,"sentencia_select":121,"INSERT":122,"INTO":123,"VALUES":124,"FROM":125,"WHERE":126,"UPDATE":127,"lista_asignaciones":128,"DELETE":129,"CAST":130,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",15:"RETURN",17:"PYC",18:"CREATE",19:"PROCEDIMIENTO",20:"ID_NORMAL",22:"AS",23:"BEGIN",25:"END",26:"FUNCTION",27:"PARIZQ",28:"PARDER",29:"RETURNS",31:"INT",32:"DOUBLE",33:"DATE_P",34:"VARCHAR",35:"BOOLEAN",36:"NULL",37:"COMA",39:"ID_VARIABLES",52:"BREAK",53:"CONTINUE",54:"FOR",55:"IN",57:"PUNTO",58:"WHILE",59:"CASE",61:"ELSE",62:"WHEN",63:"THEN",64:"IF",65:"ENTERO",66:"DECIMAL",67:"CADENA",68:"CADENA_S",70:"DATE",73:"TRUE",74:"FALSE",76:"MENOS",77:"MAS",78:"POR",79:"DIV",80:"MOD",81:"MENOR",82:"MAYOR",83:"MENORIGUAL",84:"MAYORIGUAL",85:"DIFERENTE",86:"IGUAL",87:"AND",88:"OR",89:"NOT",91:"LOWER",92:"UPPER",93:"ROUND",94:"LEN",95:"TYPEOF",96:"TRUNCATE",97:"DECLARE",100:"DEFAULT",101:"SET",102:"SELECT",103:"PRINT",107:"TABLE",110:"ALTER",112:"ADD",113:"DROP",114:"COLUMN",115:"RENAME",116:"TO",122:"INSERT",123:"INTO",124:"VALUES",125:"FROM",126:"WHERE",127:"UPDATE",129:"DELETE",130:"CAST"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[11,2],[11,1],[12,1],[12,1],[14,3],[9,9],[8,12],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[21,3],[21,1],[38,2],[38,2],[38,2],[38,2],[38,2],[24,2],[24,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[7,1],[7,1],[7,1],[50,2],[50,1],[51,1],[51,2],[51,2],[46,8],[56,4],[45,6],[44,9],[44,6],[44,7],[44,8],[60,5],[60,4],[43,7],[43,9],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,2],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,2],[16,3],[71,4],[69,4],[69,4],[69,6],[69,4],[69,4],[69,6],[40,3],[10,4],[98,3],[98,1],[99,2],[99,2],[99,2],[99,2],[99,2],[99,4],[99,4],[99,4],[99,4],[99,4],[41,3],[41,3],[49,3],[49,5],[42,3],[47,1],[47,1],[47,1],[104,7],[108,3],[108,1],[109,2],[109,2],[109,2],[109,2],[109,2],[105,5],[111,3],[111,3],[111,3],[111,3],[111,3],[111,3],[111,5],[111,3],[106,4],[48,1],[48,1],[48,1],[48,1],[48,1],[117,11],[90,3],[90,1],[121,5],[121,7],[121,5],[121,7],[75,6],[75,8],[75,6],[75,8],[118,7],[128,3],[128,1],[120,4],[119,6],[72,6],[72,6],[72,6],[72,6],[72,6]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$ = $$[$0-1]; return this.$;
break;
case 2: case 9: case 29:
this.$ = $$[$0-1]; this.$.push($$[$0]);
break;
case 3: case 10: case 30: case 143:
this.$ = []; this.$.push($$[$0]);
break;
case 4: case 12: case 31: case 32: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 45: case 115: case 116: case 117: case 136: case 137: case 138: case 139: case 140:
this.$=$$[$0];
break;
case 5: case 6: case 7: case 11: case 33:
this.$ = $$[$0];
break;
case 8:
console.error('Error sint√°ctico: ' + yytext + ',  linea: ' + this._$.first_line + ', columna: ' + this._$.first_column);

errores.agregar_error('Error SINTACTICO',yytext,this._$.first_line,this._$.first_column);

break;
case 13:
this.$=new dato_simple('RETURN',$$[$0-1]);
break;
case 15:
this.$=new funcion($$[$0-9],$$[$0-7],$$[$0-4],$$[$0-2]);
break;
case 16:
this.$='INT';
break;
case 17:
this.$='DOUBLE';
break;
case 18:
this.$='DATE';
break;
case 19:
this.$='VARCHAR';
break;
case 20:
this.$='BOOLEAN';
break;
case 21:
this.$='NULL';
break;
case 22:
this.$=$$[$0-2]; this.$.push($$[$0]);
break;
case 23: case 44:
this.$=[];this.$.push($$[$0]);
break;
case 24:
this.$=new parametro($$[$0-1],'INT');
break;
case 25:
this.$=new parametro($$[$0-1],'DOUBLE');
break;
case 26:
this.$=new parametro($$[$0-1],'DATE');
break;
case 27:
this.$=new parametro($$[$0-1],'VARCHAR');
break;
case 28:
this.$=new parametro($$[$0-1],'BOOLEAN');
break;
case 43:
this.$=$$[$0-1]; this.$.push($$[$0]);
break;
case 46:
this.$=new dato_simple('BREAK','BREAK');
break;
case 47:
this.$=new dato_simple('CONTINUE','CONTINUE');
break;
case 48:
this.$=new For_($$[$0-6],$$[$0-4],$$[$0-2]);
break;
case 49:
this.$=[];this.$.push($$[$0-3]);this.$.push($$[$0]);
break;
case 50:
this.$=new while_($$[$0-4],$$[$0-2]);
break;
case 51:
this.$=new case_($$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 52:
this.$=new case_(null,$$[$0-4],$$[$0-2],null);
break;
case 53:
this.$=new case_($$[$0-5],$$[$0-4],$$[$0-2],null);
break;
case 54:
this.$=new case_(null,$$[$0-6],$$[$0-4],$$[$0-1]);
break;
case 55:
this.$ = $$[$0-4]; this.$.push(new when_($$[$0-2],$$[$0]));
break;
case 56:
this.$=[];this.$.push(new when_($$[$0-2],$$[$0]));
break;
case 57:
this.$=new if_($$[$0-5],$$[$0-3],null);
break;
case 58:
this.$=new if_($$[$0-7],$$[$0-5],$$[$0-3]);
break;
case 59:
this.$ = new dato_simple('INT', $$[$0]);
break;
case 60:
this.$ = new dato_simple('DOUBLE', $$[$0]);
break;
case 61: case 62:
 this.$ = new dato_simple('STRING', $$[$0]);
break;
case 63:
this.$=new dato_simple('PRIMITIVA',$$[$0]);
break;
case 64:
 this.$ = new dato_simple('DATE', $$[$0]);
break;
case 65:
this.$=new dato_simple('LLAMADA',$$[$0]);
break;
case 66:
this.$=new dato_simple('CASTEO',$$[$0]);
break;
case 67:
this.$ = new dato_simple('ID_VARIABLE', $$[$0]);
break;
case 68:
this.$ = new dato_simple('ID_NORMAL', $$[$0]);
break;
case 69:
 this.$ = new dato_simple('TRUE', $$[$0]);
break;
case 70:
 this.$ = new dato_simple('FALSE', $$[$0]);
break;
case 71:
 this.$ = new dato_simple('NULL', $$[$0]);
break;
case 73:
 this.$ = new dato_simple('NEGATIVO', $$[$0]);
break;
case 74:
 this.$ = new expresion('SUMA', $$[$0-2], $$[$0]);
break;
case 75:
 this.$ = new expresion('RESTA', $$[$0-2], $$[$0]);
break;
case 76:
 this.$ = new expresion('POR', $$[$0-2], $$[$0]);
break;
case 77:
 this.$ = new expresion('DIV', $$[$0-2], $$[$0]);
break;
case 78:
 this.$ = new expresion('MOD', $$[$0-2], $$[$0]);
break;
case 79:
this.$=new expresion('MENOR',$$[$0-2],$$[$0]);
break;
case 80:
this.$=new expresion('MAYOR',$$[$0-2],$$[$0]);
break;
case 81:
this.$=new expresion('MENOR_IGUAL',$$[$0-2],$$[$0]);
break;
case 82:
this.$=new expresion('MAYOR_IGUAL',$$[$0-2],$$[$0]);
break;
case 83:
this.$=new expresion('DIFERENTE',$$[$0-2],$$[$0]);
break;
case 84:
this.$=new expresion('IGUAL',$$[$0-2],$$[$0]);
break;
case 85:
this.$=new expresion('AND',$$[$0-2],$$[$0]);
break;
case 86:
this.$=new expresion('OR',$$[$0-2],$$[$0]);
break;
case 87:
this.$=new expresion('NOT',$$[$0]);
break;
case 88:
this.$=$$[$0-1];
break;
case 89:
this.$=new llamado($$[$0-3],$$[$0-1]);
break;
case 90:
this.$=new lower_($$[$0-1]);
break;
case 91:
this.$=new upper_($$[$0-1]);
break;
case 92:
this.$=new round_($$[$0-3],$$[$0-1]);
break;
case 93:
this.$=new lenght_($$[$0-1]);
break;
case 94:
this.$=new type_of_($$[$0-1]);
break;
case 95:
this.$=new truncate_($$[$0-3],$$[$0-1]);
break;
case 96:
this.$=new declaraciones_multiples($$[$0-1]);
break;
case 97:
this.$=new encapsulamiento($$[$0-2]);
break;
case 98: case 119: case 142:
this.$ = $$[$0-2]; this.$.push($$[$0]);
break;
case 99: case 120:
this.$ = []; this.$.push($$[$0])
break;
case 100:
this.$=new declaracion($$[$0-1],'INT',null);
break;
case 101:
this.$=new declaracion($$[$0-1],'DOUBLE',null);
break;
case 102:
this.$=new declaracion($$[$0-1],'DATE',null);
break;
case 103:
this.$=new declaracion($$[$0-1],'VARCHAR',null);
break;
case 104:
this.$=new declaracion($$[$0-1],'BOOLEAN',null);
break;
case 105:
this.$=new declaracion($$[$0-3],'INT',$$[$0]);
break;
case 106:
this.$=new declaracion($$[$0-3],'DOUBLE',$$[$0]);
break;
case 107:
this.$=new declaracion($$[$0-3],'DATE',$$[$0]);
break;
case 108:
this.$=new declaracion($$[$0-3],'VARCHAR',$$[$0]);
break;
case 109:
this.$=new declaracion($$[$0-3],'BOOLEAN',$$[$0]);
break;
case 110:
this.$=new Set_var($$[$0-1]);
break;
case 111:
this.$=new asignacion_columna($$[$0-2],$$[$0]);
break;
case 112:
this.$=new select_simple($$[$0-1],null);
break;
case 113:
this.$=new select_simple($$[$0-3],$$[$0-1]);
break;
case 114:
this.$ = new print($$[$0-1]);
break;
case 118:
this.$=new create_table(new tabla($$[$0-4],$$[$0-2]));
break;
case 121:
this.$=new columna('INT',$$[$0-1]);
break;
case 122:
this.$=new columna('DOUBLE',$$[$0-1]);
break;
case 123:
this.$=new columna('DATE',$$[$0-1]);
break;
case 124:
this.$=new columna('VARCHAR',$$[$0-1]);
break;
case 125:
this.$=new columna('BOOL',$$[$0-1]);
break;
case 126:
this.$=new alter_table($$[$0-2],$$[$0-1]);
break;
case 127:
this.$=new add_column(new columna('INT',$$[$0-1]),'ADD');
break;
case 128:
this.$=new add_column(new columna('DOUBLE',$$[$0-1]),'ADD');
break;
case 129:
this.$=new add_column(new columna('DATE',$$[$0-1]),'ADD');
break;
case 130:
this.$=new add_column(new columna('VARCHAR',$$[$0-1]),'ADD');
break;
case 131:
this.$=new add_column(new columna('BOOL',$$[$0-1]),'ADD');
break;
case 132:
this.$=new drop_column($$[$0],'DROP');
break;
case 133:
this.$=new rename_col($$[$0-2],$$[$0],'RENAME');
break;
case 135:
this.$=new drop_table($$[$0-1]);
break;
case 141:
this.$=new insert_c($$[$0-8],$$[$0-6],$$[$0-2]);
break;
case 144: case 146:
this.$=new Select_columnas($$[$0-3],$$[$0-1],null);
break;
case 145: case 147:
this.$=new Select_columnas($$[$0-5],$$[$0-3],$$[$0-1]);
break;
case 152:
this.$=new update($$[$0-5],$$[$0-3],$$[$0-1]);
break;
case 153:
 this.$ = $$[$0-2]; this.$.push($$[$0]);
break;
case 154:
 this.$ = []; this.$.push($$[$0]);
break;
case 155:
this.$=new truncate_table($$[$0-1]);
break;
case 156:
this.$=new delete_registro($$[$0-3],$$[$0-1]);
break;
case 157:
this.$=new casteo($$[$0-3],'INT');
break;
case 158:
this.$=new casteo($$[$0-3],'DOUBLE');
break;
case 159:
this.$=new casteo($$[$0-3],'DATE');
break;
case 160:
this.$=new casteo($$[$0-3],'VARCHAR');
break;
case 161:
this.$=new casteo($$[$0-3],'BOOLEAN');
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,18:$V1,23:$V2,47:9,48:10,49:11,96:$V3,102:$V4,104:14,105:15,106:16,110:$V5,113:$V6,117:17,118:18,119:19,120:20,121:21,122:$V7,127:$V8,129:$V9},{1:[3]},{2:$V0,5:[1,29],6:30,7:4,8:5,9:6,10:7,18:$V1,23:$V2,47:9,48:10,49:11,96:$V3,102:$V4,104:14,105:15,106:16,110:$V5,113:$V6,117:17,118:18,119:19,120:20,121:21,122:$V7,127:$V8,129:$V9},o($Va,[2,3]),o($Va,[2,4]),o($Va,[2,5]),o($Va,[2,6]),o($Va,[2,7]),o($Va,[2,8]),o($Vb,[2,40]),o($Vb,[2,41]),o($Vb,[2,42]),{19:[1,32],26:[1,31],107:$Vc},{7:43,10:44,13:35,18:$Vd,20:$Ve,23:$V2,24:34,40:36,41:37,42:38,43:39,44:40,45:41,46:42,47:9,48:10,49:11,54:$Vf,58:$Vg,59:$Vh,64:$Vi,96:$V3,97:$Vj,101:$Vk,102:$V4,103:$Vl,104:14,105:15,106:16,110:$V5,113:$V6,117:17,118:18,119:19,120:20,121:21,122:$V7,127:$V8,129:$V9},o($Vb,[2,115]),o($Vb,[2,116]),o($Vb,[2,117]),o($Vb,[2,136]),o($Vb,[2,137]),o($Vb,[2,138]),o($Vb,[2,139]),o($Vb,[2,140]),{16:56,20:$Vm,27:$Vn,36:$Vo,39:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:61,70:$Vu,71:63,72:64,73:$Vv,74:$Vw,75:70,76:$Vx,78:[1,55],89:$Vy,90:54,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,130:$VF},{107:[1,81]},{107:[1,82]},{123:[1,83]},{20:[1,84]},{125:[1,85]},{107:[1,86]},{1:[2,1]},o($Va,[2,2]),{20:[1,87]},{20:[1,88]},{20:[1,89]},{7:43,10:44,13:91,18:$Vd,20:$Ve,23:$V2,25:[1,90],40:36,41:37,42:38,43:39,44:40,45:41,46:42,47:9,48:10,49:11,54:$Vf,58:$Vg,59:$Vh,64:$Vi,96:$V3,97:$Vj,101:$Vk,102:$V4,103:$Vl,104:14,105:15,106:16,110:$V5,113:$V6,117:17,118:18,119:19,120:20,121:21,122:$V7,127:$V8,129:$V9},o($VG,[2,30]),o($VH,[2,31]),o($VH,[2,32]),o($VH,[2,33]),o($VH,[2,34]),o($VH,[2,35]),o($VH,[2,36]),o($VH,[2,37]),o($VH,[2,38]),o($VH,[2,39]),{39:$VI,98:92,99:93},{16:95,20:$Vm,27:$Vn,36:$Vo,39:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:61,70:$Vu,71:63,72:64,73:$Vv,74:$Vw,75:70,76:$Vx,89:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,130:$VF},{86:[1,96]},{16:97,20:$Vm,27:$Vn,36:$Vo,39:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:61,70:$Vu,71:63,72:64,73:$Vv,74:$Vw,75:70,76:$Vx,89:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,130:$VF},{16:98,20:$Vm,27:$Vn,36:$Vo,39:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:61,70:$Vu,71:63,72:64,73:$Vv,74:$Vw,75:70,76:$Vx,89:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,130:$VF},{16:99,20:$Vm,27:$Vn,36:$Vo,39:$Vp,60:100,62:$VJ,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:61,70:$Vu,71:63,72:64,73:$Vv,74:$Vw,75:70,76:$Vx,89:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,130:$VF},{16:102,20:$Vm,27:$Vn,36:$Vo,39:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:61,70:$Vu,71:63,72:64,73:$Vv,74:$Vw,75:70,76:$Vx,89:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,130:$VF},{16:103,20:$Vm,27:$Vn,36:$Vo,39:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:61,70:$Vu,71:63,72:64,73:$Vv,74:$Vw,75:70,76:$Vx,89:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,130:$VF},{107:$Vc},{17:[1,104],22:[1,105],37:$VK,125:[1,106]},{125:[1,108]},o($VL,[2,143],{76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY}),o($VZ,[2,59]),o($VZ,[2,60]),o($VZ,[2,61]),o($VZ,[2,62]),o($VZ,[2,63]),o($VZ,[2,64]),o($VZ,[2,65]),o($VZ,[2,66]),o($VZ,[2,67]),o($VZ,[2,68],{27:[1,122]}),o($VZ,[2,69]),o($VZ,[2,70]),o($VZ,[2,71]),o($VZ,[2,72]),{16:123,20:$Vm,27:$Vn,36:$Vo,39:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:61,70:$Vu,71:63,72:64,73:$Vv,74:$Vw,75:70,76:$Vx,89:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,130:$VF},{16:124,20:$Vm,27:$Vn,36:$Vo,39:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:61,70:$Vu,71:63,72:64,73:$Vv,74:$Vw,75:70,76:$Vx,89:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,130:$VF},{16:125,20:$Vm,27:$Vn,36:$Vo,39:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:61,70:$Vu,71:63,72:64,73:$Vv,74:$Vw,75:70,76:$Vx,89:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,102:[1,126],130:$VF},{27:[1,127]},{27:[1,128]},{27:[1,129]},{27:[1,130]},{27:[1,131]},{27:[1,132]},{27:[1,133]},{20:[1,134]},{20:[1,135]},{20:[1,136]},{101:[1,137]},{20:[1,138]},{20:[1,139]},{27:[1,140]},{21:141,38:142,39:$V_},{27:[1,144]},{17:[1,145]},o($VG,[2,29]),{17:[1,146],37:[1,147]},o($V$,[2,99]),{31:[1,148],32:[1,149],33:[1,150],34:[1,151],35:[1,152]},{17:[1,153],76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY},{16:154,20:$Vm,27:$Vn,36:$Vo,39:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:61,70:$Vu,71:63,72:64,73:$Vv,74:$Vw,75:70,76:$Vx,89:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,130:$VF},{17:[1,155],76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY},{63:[1,156],76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY},{60:157,62:$VJ,76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY},{61:[1,158],62:$V01},{16:160,20:$Vm,27:$Vn,36:$Vo,39:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:61,70:$Vu,71:63,72:64,73:$Vv,74:$Vw,75:70,76:$Vx,89:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,130:$VF},{23:[1,161],76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY},{55:[1,162],76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY},o($Vb,[2,112]),{16:56,20:$Vm,27:$Vn,36:$Vo,39:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:61,70:$Vu,71:63,72:64,73:$Vv,74:$Vw,75:70,76:$Vx,89:$Vy,90:163,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,130:$VF},{20:[1,164]},{16:165,20:$Vm,27:$Vn,36:$Vo,39:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:61,70:$Vu,71:63,72:64,73:$Vv,74:$Vw,75:70,76:$Vx,89:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,130:$VF},{20:[1,166]},{16:167,20:$Vm,27:$Vn,36:$Vo,39:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:61,70:$Vu,71:63,72:64,73:$Vv,74:$Vw,75:70,76:$Vx,89:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,130:$VF},{16:168,20:$Vm,27:$Vn,36:$Vo,39:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:61,70:$Vu,71:63,72:64,73:$Vv,74:$Vw,75:70,76:$Vx,89:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,130:$VF},{16:169,20:$Vm,27:$Vn,36:$Vo,39:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:61,70:$Vu,71:63,72:64,73:$Vv,74:$Vw,75:70,76:$Vx,89:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,130:$VF},{16:170,20:$Vm,27:$Vn,36:$Vo,39:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:61,70:$Vu,71:63,72:64,73:$Vv,74:$Vw,75:70,76:$Vx,89:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,130:$VF},{16:171,20:$Vm,27:$Vn,36:$Vo,39:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:61,70:$Vu,71:63,72:64,73:$Vv,74:$Vw,75:70,76:$Vx,89:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,130:$VF},{16:172,20:$Vm,27:$Vn,36:$Vo,39:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:61,70:$Vu,71:63,72:64,73:$Vv,74:$Vw,75:70,76:$Vx,89:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,130:$VF},{16:173,20:$Vm,27:$Vn,36:$Vo,39:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:61,70:$Vu,71:63,72:64,73:$Vv,74:$Vw,75:70,76:$Vx,89:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,130:$VF},{16:174,20:$Vm,27:$Vn,36:$Vo,39:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:61,70:$Vu,71:63,72:64,73:$Vv,74:$Vw,75:70,76:$Vx,89:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,130:$VF},{16:175,20:$Vm,27:$Vn,36:$Vo,39:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:61,70:$Vu,71:63,72:64,73:$Vv,74:$Vw,75:70,76:$Vx,89:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,130:$VF},{16:176,20:$Vm,27:$Vn,36:$Vo,39:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:61,70:$Vu,71:63,72:64,73:$Vv,74:$Vw,75:70,76:$Vx,89:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,130:$VF},{16:177,20:$Vm,27:$Vn,36:$Vo,39:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:61,70:$Vu,71:63,72:64,73:$Vv,74:$Vw,75:70,76:$Vx,89:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,130:$VF},{16:178,20:$Vm,27:$Vn,36:$Vo,39:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:61,70:$Vu,71:63,72:64,73:$Vv,74:$Vw,75:70,76:$Vx,89:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,130:$VF},{16:179,20:$Vm,27:$Vn,36:$Vo,39:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:61,70:$Vu,71:63,72:64,73:$Vv,74:$Vw,75:70,76:$Vx,89:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,130:$VF},{16:56,20:$Vm,27:$Vn,36:$Vo,39:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:61,70:$Vu,71:63,72:64,73:$Vv,74:$Vw,75:70,76:$Vx,89:$Vy,90:180,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,130:$VF},o($VZ,[2,73]),o($V11,[2,87],{76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW}),{28:[1,181],76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY},{16:56,20:$Vm,27:$Vn,36:$Vo,39:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:61,70:$Vu,71:63,72:64,73:$Vv,74:$Vw,75:70,76:$Vx,78:[1,183],89:$Vy,90:182,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,130:$VF},{16:184,20:$Vm,27:$Vn,36:$Vo,39:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:61,70:$Vu,71:63,72:64,73:$Vv,74:$Vw,75:70,76:$Vx,89:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,130:$VF},{16:185,20:$Vm,27:$Vn,36:$Vo,39:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:61,70:$Vu,71:63,72:64,73:$Vv,74:$Vw,75:70,76:$Vx,89:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,130:$VF},{16:186,20:$Vm,27:$Vn,36:$Vo,39:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:61,70:$Vu,71:63,72:64,73:$Vv,74:$Vw,75:70,76:$Vx,89:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,130:$VF},{16:187,20:$Vm,27:$Vn,36:$Vo,39:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:61,70:$Vu,71:63,72:64,73:$Vv,74:$Vw,75:70,76:$Vx,89:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,130:$VF},{16:188,20:$Vm,27:$Vn,36:$Vo,39:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:61,70:$Vu,71:63,72:64,73:$Vv,74:$Vw,75:70,76:$Vx,89:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,130:$VF},{16:189,20:$Vm,27:$Vn,36:$Vo,39:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:61,70:$Vu,71:63,72:64,73:$Vv,74:$Vw,75:70,76:$Vx,89:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,130:$VF},{16:190,20:$Vm,27:$Vn,36:$Vo,39:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:61,70:$Vu,71:63,72:64,73:$Vv,74:$Vw,75:70,76:$Vx,89:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,130:$VF},{111:191,112:[1,192],113:[1,193],115:[1,194]},{17:[1,195]},{27:[1,196]},{20:$Ve,41:198,101:$Vk,128:197},{126:[1,199]},{17:[1,200]},{21:201,38:142,39:$V_},{22:[1,202],37:$V21},o($V31,[2,23]),{31:[1,204],32:[1,205],33:[1,206],34:[1,207],35:[1,208]},{20:$V41,108:209,109:210},o($Vb,[2,97]),o($VH,[2,96]),{39:$VI,99:212},o($V$,[2,100],{100:[1,213]}),o($V$,[2,101],{100:[1,214]}),o($V$,[2,102],{100:[1,215]}),o($V$,[2,103],{100:[1,216]}),o($V$,[2,104],{100:[1,217]}),o($V51,[2,110]),o($V51,[2,111],{76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY}),o($VH,[2,114]),{7:43,10:44,13:35,18:$Vd,20:$Ve,23:$V2,24:218,40:36,41:37,42:38,43:39,44:40,45:41,46:42,47:9,48:10,49:11,54:$Vf,58:$Vg,59:$Vh,64:$Vi,96:$V3,97:$Vj,101:$Vk,102:$V4,103:$Vl,104:14,105:15,106:16,110:$V5,113:$V6,117:17,118:18,119:19,120:20,121:21,122:$V7,127:$V8,129:$V9},{61:[1,219],62:$V01},{16:220,20:$Vm,27:$Vn,36:$Vo,39:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:61,70:$Vu,71:63,72:64,73:$Vv,74:$Vw,75:70,76:$Vx,89:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,130:$VF},{16:221,20:$Vm,27:$Vn,36:$Vo,39:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:61,70:$Vu,71:63,72:64,73:$Vv,74:$Vw,75:70,76:$Vx,89:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,130:$VF},{63:[1,222],76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY},{7:43,10:44,13:225,18:$Vd,20:$Ve,23:$V2,40:36,41:37,42:38,43:39,44:40,45:41,46:42,47:9,48:10,49:11,50:223,51:224,52:$V61,53:$V71,54:$Vf,58:$Vg,59:$Vh,64:$Vi,96:$V3,97:$Vj,101:$Vk,102:$V4,103:$Vl,104:14,105:15,106:16,110:$V5,113:$V6,117:17,118:18,119:19,120:20,121:21,122:$V7,127:$V8,129:$V9},{16:229,20:$Vm,27:$Vn,36:$Vo,39:$Vp,56:228,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:61,70:$Vu,71:63,72:64,73:$Vv,74:$Vw,75:70,76:$Vx,89:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,130:$VF},{17:[1,230],37:$VK},{17:[1,231],126:[1,232]},o($VL,[2,142],{76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY}),{17:[1,233],126:[1,234]},o($V81,[2,74],{78:$VO,79:$VP,80:$VQ}),o($V81,[2,75],{78:$VO,79:$VP,80:$VQ}),o($VZ,[2,76]),o($VZ,[2,77]),o($VZ,[2,78]),o($V91,[2,79],{76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ}),o($V91,[2,80],{76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ}),o($V91,[2,81],{76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ}),o($V91,[2,82],{76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ}),o($V91,[2,83],{76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ}),o($V91,[2,84],{76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ}),o($V11,[2,85],{76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW}),o([15,17,18,20,22,23,25,28,37,52,53,54,55,57,58,59,61,62,63,64,88,96,97,101,102,103,110,113,122,125,126,127,129],[2,86],{76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX}),{28:[1,235],37:$VK},o($VZ,[2,88]),{37:$VK,125:[1,236]},{125:[1,237]},{28:[1,238],76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY},{28:[1,239],76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY},{37:[1,240],76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY},{28:[1,241],76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY},{28:[1,242],76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY},{37:[1,243],76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY},{22:[1,244],76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY},{17:[1,245]},{20:[1,246]},{114:[1,247]},{114:[1,248],116:[1,249]},o($Vb,[2,135]),{16:56,20:$Vm,27:$Vn,36:$Vo,39:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:61,70:$Vu,71:63,72:64,73:$Vv,74:$Vw,75:70,76:$Vx,89:$Vy,90:250,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,130:$VF},{37:[1,252],126:[1,251]},o($Va1,[2,154]),{16:253,20:$Vm,27:$Vn,36:$Vo,39:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:61,70:$Vu,71:63,72:64,73:$Vv,74:$Vw,75:70,76:$Vx,89:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,130:$VF},o($Vb,[2,155]),{28:[1,254],37:$V21},{23:[1,255]},{38:256,39:$V_},o($V31,[2,24]),o($V31,[2,25]),o($V31,[2,26]),o($V31,[2,27]),o($V31,[2,28]),{28:[1,257],37:[1,258]},o($Vb1,[2,120]),{31:[1,259],32:[1,260],33:[1,261],34:[1,262],35:[1,263]},o($V$,[2,98]),{16:264,20:$Vm,27:$Vn,36:$Vo,39:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:61,70:$Vu,71:63,72:64,73:$Vv,74:$Vw,75:70,76:$Vx,89:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,130:$VF},{16:265,20:$Vm,27:$Vn,36:$Vo,39:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:61,70:$Vu,71:63,72:64,73:$Vv,74:$Vw,75:70,76:$Vx,89:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,130:$VF},{16:266,20:$Vm,27:$Vn,36:$Vo,39:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:61,70:$Vu,71:63,72:64,73:$Vv,74:$Vw,75:70,76:$Vx,89:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,130:$VF},{16:267,20:$Vm,27:$Vn,36:$Vo,39:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:61,70:$Vu,71:63,72:64,73:$Vv,74:$Vw,75:70,76:$Vx,89:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,130:$VF},{16:268,20:$Vm,27:$Vn,36:$Vo,39:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:61,70:$Vu,71:63,72:64,73:$Vv,74:$Vw,75:70,76:$Vx,89:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,130:$VF},{7:43,10:44,13:91,18:$Vd,20:$Ve,23:$V2,25:[1,269],40:36,41:37,42:38,43:39,44:40,45:41,46:42,47:9,48:10,49:11,54:$Vf,58:$Vg,59:$Vh,61:[1,270],64:$Vi,96:$V3,97:$Vj,101:$Vk,102:$V4,103:$Vl,104:14,105:15,106:16,110:$V5,113:$V6,117:17,118:18,119:19,120:20,121:21,122:$V7,127:$V8,129:$V9},{16:271,20:$Vm,27:$Vn,36:$Vo,39:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:61,70:$Vu,71:63,72:64,73:$Vv,74:$Vw,75:70,76:$Vx,89:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,130:$VF},{25:[1,272],76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY},{63:[1,273],76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY},{16:274,20:$Vm,27:$Vn,36:$Vo,39:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:61,70:$Vu,71:63,72:64,73:$Vv,74:$Vw,75:70,76:$Vx,89:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,130:$VF},{7:43,10:44,13:225,18:$Vd,20:$Ve,23:$V2,25:[1,275],40:36,41:37,42:38,43:39,44:40,45:41,46:42,47:9,48:10,49:11,51:276,52:$V61,53:$V71,54:$Vf,58:$Vg,59:$Vh,64:$Vi,96:$V3,97:$Vj,101:$Vk,102:$V4,103:$Vl,104:14,105:15,106:16,110:$V5,113:$V6,117:17,118:18,119:19,120:20,121:21,122:$V7,127:$V8,129:$V9},o($Vc1,[2,44]),o($Vc1,[2,45]),{17:[1,277]},{17:[1,278]},{23:[1,279]},{57:[1,280],76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY},o($Vb,[2,113]),o($Vb,[2,144]),{16:281,20:$Vm,27:$Vn,36:$Vo,39:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:61,70:$Vu,71:63,72:64,73:$Vv,74:$Vw,75:70,76:$Vx,89:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,130:$VF},o($Vb,[2,146]),{16:282,20:$Vm,27:$Vn,36:$Vo,39:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:61,70:$Vu,71:63,72:64,73:$Vv,74:$Vw,75:70,76:$Vx,89:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,130:$VF},o($VZ,[2,89]),{20:[1,283]},{20:[1,284]},o($VZ,[2,90]),o($VZ,[2,91]),{16:285,20:$Vm,27:$Vn,36:$Vo,39:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:61,70:$Vu,71:63,72:64,73:$Vv,74:$Vw,75:70,76:$Vx,89:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,130:$VF},o($VZ,[2,93]),o($VZ,[2,94]),{16:286,20:$Vm,27:$Vn,36:$Vo,39:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:61,70:$Vu,71:63,72:64,73:$Vv,74:$Vw,75:70,76:$Vx,89:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,130:$VF},{31:[1,287],32:[1,288],33:[1,289],34:[1,290],35:[1,291]},o($Vb,[2,126]),{31:[1,292],32:[1,293],33:[1,294],34:[1,295],35:[1,296]},{20:[1,297]},{20:[1,298]},{20:[1,299]},{28:[1,300],37:$VK},{16:301,20:$Vm,27:$Vn,36:$Vo,39:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:61,70:$Vu,71:63,72:64,73:$Vv,74:$Vw,75:70,76:$Vx,89:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,130:$VF},{20:$Ve,41:302,101:$Vk},{17:[1,303],76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY},{29:[1,304]},{7:43,10:44,13:35,18:$Vd,20:$Ve,23:$V2,24:305,40:36,41:37,42:38,43:39,44:40,45:41,46:42,47:9,48:10,49:11,54:$Vf,58:$Vg,59:$Vh,64:$Vi,96:$V3,97:$Vj,101:$Vk,102:$V4,103:$Vl,104:14,105:15,106:16,110:$V5,113:$V6,117:17,118:18,119:19,120:20,121:21,122:$V7,127:$V8,129:$V9},o($V31,[2,22]),{17:[1,306]},{20:$V41,109:307},o($Vb1,[2,121]),o($Vb1,[2,122]),o($Vb1,[2,123]),o($Vb1,[2,124]),o($Vb1,[2,125]),o($V$,[2,105],{76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY}),o($V$,[2,106],{76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY}),o($V$,[2,107],{76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY}),o($V$,[2,108],{76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY}),o($V$,[2,109],{76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY}),{64:[1,308]},{7:43,10:44,13:35,18:$Vd,20:$Ve,23:$V2,24:309,40:36,41:37,42:38,43:39,44:40,45:41,46:42,47:9,48:10,49:11,54:$Vf,58:$Vg,59:$Vh,64:$Vi,96:$V3,97:$Vj,101:$Vk,102:$V4,103:$Vl,104:14,105:15,106:16,110:$V5,113:$V6,117:17,118:18,119:19,120:20,121:21,122:$V7,127:$V8,129:$V9},{25:[1,310],76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY},{17:[1,311],22:[1,312]},{16:313,20:$Vm,27:$Vn,36:$Vo,39:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:61,70:$Vu,71:63,72:64,73:$Vv,74:$Vw,75:70,76:$Vx,89:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,130:$VF},o($Vd1,[2,56],{76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY}),{17:[1,314]},o($Vc1,[2,43]),o($Vc1,[2,46]),o($Vc1,[2,47]),{7:43,10:44,13:225,18:$Vd,20:$Ve,23:$V2,40:36,41:37,42:38,43:39,44:40,45:41,46:42,47:9,48:10,49:11,50:315,51:224,52:$V61,53:$V71,54:$Vf,58:$Vg,59:$Vh,64:$Vi,96:$V3,97:$Vj,101:$Vk,102:$V4,103:$Vl,104:14,105:15,106:16,110:$V5,113:$V6,117:17,118:18,119:19,120:20,121:21,122:$V7,127:$V8,129:$V9},{57:[1,316]},{17:[1,317],76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY},{17:[1,318],76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY},{28:[1,319],126:[1,320]},{28:[1,321],126:[1,322]},{28:[1,323],76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY},{28:[1,324],76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY},{28:[1,325]},{28:[1,326]},{28:[1,327]},{28:[1,328]},{28:[1,329]},{17:[2,127]},{17:[2,128]},{17:[2,129]},{17:[2,130]},{17:[2,131]},{17:[2,132]},{116:[1,330]},{17:[2,134]},{124:[1,331]},{17:[1,332],76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY},o($Va1,[2,153]),o($Vb,[2,156]),{30:333,31:[1,334],32:[1,335],33:[1,336],34:[1,337],35:[1,338],36:[1,339]},{7:43,10:44,13:91,18:$Vd,20:$Ve,23:$V2,25:[1,340],40:36,41:37,42:38,43:39,44:40,45:41,46:42,47:9,48:10,49:11,54:$Vf,58:$Vg,59:$Vh,64:$Vi,96:$V3,97:$Vj,101:$Vk,102:$V4,103:$Vl,104:14,105:15,106:16,110:$V5,113:$V6,117:17,118:18,119:19,120:20,121:21,122:$V7,127:$V8,129:$V9},o($Vb,[2,118]),o($Vb1,[2,119]),{17:[1,341]},{7:43,10:44,13:91,18:$Vd,20:$Ve,23:$V2,25:[1,342],40:36,41:37,42:38,43:39,44:40,45:41,46:42,47:9,48:10,49:11,54:$Vf,58:$Vg,59:$Vh,64:$Vi,96:$V3,97:$Vj,101:$Vk,102:$V4,103:$Vl,104:14,105:15,106:16,110:$V5,113:$V6,117:17,118:18,119:19,120:20,121:21,122:$V7,127:$V8,129:$V9},{17:[1,344],22:[1,343]},o($VH,[2,52]),{16:345,20:$Vm,27:$Vn,36:$Vo,39:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:61,70:$Vu,71:63,72:64,73:$Vv,74:$Vw,75:70,76:$Vx,89:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,130:$VF},o($Vd1,[2,55],{76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY}),o($VH,[2,50]),{7:43,10:44,13:225,18:$Vd,20:$Ve,23:$V2,25:[1,346],40:36,41:37,42:38,43:39,44:40,45:41,46:42,47:9,48:10,49:11,51:276,52:$V61,53:$V71,54:$Vf,58:$Vg,59:$Vh,64:$Vi,96:$V3,97:$Vj,101:$Vk,102:$V4,103:$Vl,104:14,105:15,106:16,110:$V5,113:$V6,117:17,118:18,119:19,120:20,121:21,122:$V7,127:$V8,129:$V9},{16:347,20:$Vm,27:$Vn,36:$Vo,39:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:61,70:$Vu,71:63,72:64,73:$Vv,74:$Vw,75:70,76:$Vx,89:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,130:$VF},o($Vb,[2,145]),o($Vb,[2,147]),o($VZ,[2,148]),{16:348,20:$Vm,27:$Vn,36:$Vo,39:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:61,70:$Vu,71:63,72:64,73:$Vv,74:$Vw,75:70,76:$Vx,89:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,130:$VF},o($VZ,[2,150]),{16:349,20:$Vm,27:$Vn,36:$Vo,39:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:61,70:$Vu,71:63,72:64,73:$Vv,74:$Vw,75:70,76:$Vx,89:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,130:$VF},o($VZ,[2,92]),o($VZ,[2,95]),o($VZ,[2,157]),o($VZ,[2,158]),o($VZ,[2,159]),o($VZ,[2,160]),o($VZ,[2,161]),{20:[1,350]},{27:[1,351]},o($Vb,[2,152]),{23:[1,352]},{23:[2,16]},{23:[2,17]},{23:[2,18]},{23:[2,19]},{23:[2,20]},{23:[2,21]},{17:[1,353]},o($VH,[2,57]),{64:[1,354]},{16:355,20:$Vm,27:$Vn,36:$Vo,39:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:61,70:$Vu,71:63,72:64,73:$Vv,74:$Vw,75:70,76:$Vx,89:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,130:$VF},o($VH,[2,53]),{17:[1,356],76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY},{17:[1,357]},{23:[2,49],76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY},{28:[1,358],76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY},{28:[1,359],76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY},{17:[2,133]},{16:56,20:$Vm,27:$Vn,36:$Vo,39:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:61,70:$Vu,71:63,72:64,73:$Vv,74:$Vw,75:70,76:$Vx,89:$Vy,90:360,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,130:$VF},{7:43,10:44,11:361,12:362,13:363,14:364,15:$Ve1,18:$Vd,20:$Ve,23:$V2,40:36,41:37,42:38,43:39,44:40,45:41,46:42,47:9,48:10,49:11,54:$Vf,58:$Vg,59:$Vh,64:$Vi,96:$V3,97:$Vj,101:$Vk,102:$V4,103:$Vl,104:14,105:15,106:16,110:$V5,113:$V6,117:17,118:18,119:19,120:20,121:21,122:$V7,127:$V8,129:$V9},o($Va,[2,14]),{17:[1,366]},{17:[1,367],76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY},o($VH,[2,54]),o($VH,[2,48]),o($VZ,[2,149]),o($VZ,[2,151]),{28:[1,368],37:$VK},{7:43,10:44,12:370,13:363,14:364,15:$Ve1,18:$Vd,20:$Ve,23:$V2,25:[1,369],40:36,41:37,42:38,43:39,44:40,45:41,46:42,47:9,48:10,49:11,54:$Vf,58:$Vg,59:$Vh,64:$Vi,96:$V3,97:$Vj,101:$Vk,102:$V4,103:$Vl,104:14,105:15,106:16,110:$V5,113:$V6,117:17,118:18,119:19,120:20,121:21,122:$V7,127:$V8,129:$V9},o($Vf1,[2,10]),o($Vf1,[2,11]),o($Vf1,[2,12]),{16:371,20:$Vm,27:$Vn,36:$Vo,39:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:61,70:$Vu,71:63,72:64,73:$Vv,74:$Vw,75:70,76:$Vx,89:$Vy,91:$Vz,92:$VA,93:$VB,94:$VC,95:$VD,96:$VE,130:$VF},o($VH,[2,58]),o($VH,[2,51]),{17:[1,372]},{17:[1,373]},o($Vf1,[2,9]),{17:[1,374],76:$VM,77:$VN,78:$VO,79:$VP,80:$VQ,81:$VR,82:$VS,83:$VT,84:$VU,85:$VV,86:$VW,87:$VX,88:$VY},o($Vb,[2,141]),o($Va,[2,15]),o($Vf1,[2,13])],
defaultActions: {29:[2,1],292:[2,127],293:[2,128],294:[2,129],295:[2,130],296:[2,131],297:[2,132],299:[2,134],334:[2,16],335:[2,17],336:[2,18],337:[2,19],338:[2,20],339:[2,21],350:[2,133]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

const instruccion = require('../interprete/instruccion');
const expresion = require('../interprete/expresion');
const print = require('../interprete/print');
const dato_simple = require('../interprete/dato_simple');
const columna = require('../estructuras/columna');
const create_table = require('../interprete/create_table.js');
const add_column=require('../interprete/add_column');
const tabla=require('../estructuras/tabla');
const alter_table=require('../interprete/alter_table');
const drop_column= require('../interprete/drop_column');
const rename_col= require('../interprete/rename_col');
const drop_table= require('../interprete/drop_table');
const insert_c= require('../interprete/insert_c');
const Select_columnas = require('../interprete/Select_columnas');
const asignacion_columna = require('../interprete/asignacion_columna');
const truncate_table = require('../interprete/truncate_table');
const casteo = require('../interprete/casteo');
const if_ = require('../interprete/if_');
const declaracion = require('../interprete/declaracion');
const declaraciones_multiples = require('../interprete/declaraciones_multiples');
const Set_var = require('../interprete/Set_var');
const select_simple = require('../interprete/select_simple');
const For_ = require('../interprete/For_');
const while_ = require('../interprete/while_');
const case_ = require('../interprete/case_');
const when_ = require('../interprete/when_');
const lower_= require('../interprete/lower_');
const upper_= require('../interprete/upper_');
const round_= require('../interprete/round_');
const lenght_= require('../interprete/lenght_');
const type_of_= require('../interprete/type_of_');
const truncate_ = require('../interprete/truncate_');
const encapsulamiento = require('../interprete/encapsulamiento');
const llamado= require('../interprete/llamado');
const funcion = require('../interprete/funcion');
const update = require('../interprete/update');
const procedimiento = require('../interprete/procedimiento');
const delete_registro = require('../interprete/delete_registro');
const parametro = require('../interprete/parametro');
const errores=require('../manejador_errores/errores');
var cadena = '';
const lista=[];
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* Espacios se ignoran */
break;
case 1:
break;
case 2:
break;
case 3:console.log('Reconocio lexema PYC: '+yy_.yytext);
               return 17
break;
case 4:console.log('Reconocio lexema PARIZQ: '+yy_.yytext);return 27
break;
case 5:console.log('Reconocio lexema PARDER: '+yy_.yytext);return 28
break;
case 6:console.log('Reconocio lexema COMA: '+yy_.yytext);
            return 37
break;
case 7:console.log('Reconocio lexema MAS: '+yy_.yytext);
               return 77
break;
case 8:
    
    console.log('Reconocio lexema MENOS: '+yy_.yytext);    
    return 76
break;
case 9:
    console.log('Reconocio lexema POR: '+yy_.yytext);
    return 78
break;
case 10:
    console.log('Reconocio lexema DIV: '+yy_.yytext);
    return 79
break;
case 11:
    console.log('Reconocio lexema MOD: '+yy_.yytext);
    return 80
break;
case 12:
    console.log('Reconocio lexema MENORIGUAL: '+yy_.yytext);
    return 83
break;
case 13:
    console.log('Reconocio lexema MAYORIGUAL: '+yy_.yytext);
    return 84
break;
case 14:console.log('Reconocio lexema MENOR: '+yy_.yytext);
              return 81;
break;
case 15:
    console.log('Reconocio lexema MAYOR: '+yy_.yytext);
    return 82
break;
case 16:
    console.log('Reconocio lexema DIFERENTE: '+yy_.yytext);
    return 85
break;
case 17:
    console.log('Reconocio lexema IGUAL: '+yy_.yytext);
    return 86
break;
case 18:
    console.log('Reconocio lexema DECIMAL: '+yy_.yytext);
    return 66
break;
case 19:
    console.log('Reconocio lexema DATE: '+yy_.yytext);
    return 70
break;
case 20: 
    console.log('Reconocio lexema BOOLEAN: '+yy_.yytext);
    return 35
break;
case 21:
    console.log('Reconocio lexema INT: '+yy_.yytext);
    return 31
break;
case 22:
    console.log('Reconocio lexema DOUBLE: '+yy_.yytext);
    return 32
break;
case 23:
    console.log('Reconocio lexema DATE_P: '+yy_.yytext);
    return 33
break;
case 24:
    console.log('Reconocio lexema VARCHAR: '+yy_.yytext);
    return 34
break;
case 25:
    console.log('Reconocio lexema TRUE: '+yy_.yytext);
    return 73
break;
case 26:
    console.log('Reconocio lexema FALSE: '+yy_.yytext);
    return 74
break;
case 27:
    console.log('Reconocio lexema NULL: '+yy_.yytext);
    return 36
break;
case 28:
    console.log('Reconocio lexema DECLARE: '+yy_.yytext);
    return 97
break;
case 29:
    console.log('Reconocio lexema DEFAULT: '+yy_.yytext);
    return 100
break;
case 30:
    console.log('Reconocio lexema SET: '+yy_.yytext);
    return 101
break;
case 31:
    console.log('Reconocio lexema SELECT: '+yy_.yytext);
    return 102
break;
case 32:
    console.log('Reconocio lexema TABLE: '+yy_.yytext);
    return 107
break;
case 33:
    console.log('Reconocio lexema CREATE: '+yy_.yytext);
    return 18
break;
case 34:
    console.log('Reconocio lexema ALTER: '+yy_.yytext);
    return 110
break;
case 35:
    console.log('Reconocio lexema ADD: '+yy_.yytext);
    return 112
break;
case 36:
    console.log('Reconocio lexema DROP: '+yy_.yytext);
    return 113
break;
case 37:
    console.log('Reconocio lexema RENAME: '+yy_.yytext);
    return 115
break;
case 38:
    
    console.log('Reconocio lexema TO: '+yy_.yytext);
    return 116
break;
case 39:
    console.log('Reconocio lexema COLUMN: '+yy_.yytext);
    return 114
break;
case 40:
    console.log('Reconocio lexema INSERT: '+yy_.yytext);
    return 122
break;
case 41:
    
    console.log('Reconocio lexema INTO: '+yy_.yytext);
    return 123
break;
case 42:cadena=''; this.begin('string');
break;
case 43:cadena+=yy_.yytext;
break;
case 44:cadena+='\"';
break;
case 45:cadena+='\\';
break;
case 46:cadena+='\\n';
break;
case 47:cadena+='\\r';
break;
case 48:cadena+='\\t';
break;
case 49:cadena+=" " ;
break;
case 50:yy_.yytext=cadena; this.popState();console.log("Reconocido lexema CADENA: "+yy_.yytext );return 67;
break;
case 51:cadena=''; this.begin('string_s');
break;
case 52:cadena+=yy_.yytext;
break;
case 53:cadena+='\"';
break;
case 54:cadena+='\\';
break;
case 55:cadena+='\\n';
break;
case 56:cadena+='\\r';
break;
case 57:cadena+='\\t';
break;
case 58:cadena+=" " ;
break;
case 59:yy_.yytext=cadena; this.popState();console.log("Reconocido lexema CADENA_S: "+yy_.yytext );return 68;
break;
case 60:
    console.log('Reconocio lexema VALUES: '+yy_.yytext);
    return 124
break;
case 61:
    console.log('Reconocio lexema FROM: '+yy_.yytext);
    return 125
break;
case 62:
    console.log('Reconocio lexema WHERE: '+yy_.yytext);
    return 126
break;
case 63:
    console.log('Reconocio lexema UPDATE: '+yy_.yytext);
    return 127
break;
case 64:
    console.log('Reconocio lexema TRUNCATE: '+yy_.yytext);
    return 96
break;
case 65:
    console.log('Reconocio lexema DELETE: '+yy_.yytext);
    return 129
break;
case 66:
    console.log('Reconocio lexema CAST: '+yy_.yytext);
    return 130
break;
case 67:
    console.log('Reconocio lexema IF: '+yy_.yytext);
    return 64
break;
case 68:
    console.log('Reconocio lexema THEN: '+yy_.yytext);
    return 63
break;
case 69:
    console.log('Reconocio lexema BEGIN: '+yy_.yytext);
    return 23
break;
case 70:
    console.log('Reconocio lexema END: '+yy_.yytext);
    return 25
break;
case 71:
    console.log('Reconocio lexema ELSE: '+yy_.yytext);
    return 61
break;
case 72:
    console.log('Reconocio lexema PRINT: '+yy_.yytext);
    return 103
break;
case 73:
    console.log('Reconocio lexema CASE: '+yy_.yytext);    
    return 59
break;
case 74:
    console.log('Reconocio lexema WHEN: '+yy_.yytext);
    return 62
break;
case 75:
    console.log('Reconocio lexema FOR: '+yy_.yytext);
    return 54
break;
case 76:
    console.log('Reconocio lexema IN: '+yy_.yytext);
    return 55
break;
case 77:
    console.log('Reconocio lexema WHILE: '+yy_.yytext);
    return 58
break;
case 78:
    console.log('Reconocio lexema LOOP: '+yy_.yytext);
    return 'LOOP'
break;
case 79:
    console.log('Reconocio lexema BREAK: '+yy_.yytext);
    return 52
break;
case 80:
    console.log('Reconocio lexema CONTINUE: '+yy_.yytext);
    return 53
break;
case 81:
    console.log('Reconocio lexema FUNCTION: '+yy_.yytext);
    return 26
break;
case 82:
    console.log('Reconocio lexema RETURN: '+yy_.yytext);
    return 15
break;
case 83:
    console.log('Reconocio lexema PROCEDURE: '+yy_.yytext);
    return 19
break;
case 84:
    console.log('Reconocio lexema LOWER: '+yy_.yytext);
    return 91
break;
case 85:
    console.log('Reconocio lexema UPPER: '+yy_.yytext);
    return 92
break;
case 86:
    console.log('Reconocio lexema ROUND: '+yy_.yytext);
    return 93
break;
case 87:
    console.log('Reconocio lexema LEN: '+yy_.yytext);
    return 94
break;
case 88:
    console.log('Reconocio lexema TYPEOF: '+yy_.yytext);
    return 95
break;
case 89:
    console.log('Reconocio lexema AS: '+yy_.yytext);
    return 22
break;
case 90:
    console.log('Reconocio lexema AND: '+yy_.yytext);
    return 87
break;
case 91:
    console.log('Reconocio lexema OR: '+yy_.yytext);
    return 88
break;
case 92:
    console.log('Reconocio lexema NOT: '+yy_.yytext);
    return 89
break;
case 93:
    console.log('Reconocio lexema RETURNS: '+yy_.yytext);
    return 29
break;
case 94:
    console.log('Reconocio lexema PUNTO: '+yy_.yytext);
    return 57
break;
case 95:
    console.log('Reconocio lexema ENTERO: '+yy_.yytext); 
    return 65; 
break;
case 96:
    console.log('Reconocio lexema ID_VARIABLES: '+yy_.yytext);
    return 39
break;
case 97:
    console.log('Reconocio lexema ID_NORMAL: '+yy_.yytext);
    return 20
break;
case 98:return 5;
break;
case 99: console.error('Error l√©xico: \"' + yy_.yytext + '\", linea: ' + yy_.yylloc.first_line + ', columna: ' + yy_.yylloc.first_column); 

 errores.agregar_error('Error lexico',yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column);

 
break;
}
},
rules: [/^(?:[ \s\r\n\t])/i,/^(?:((-)(-)+.*\r\n)|((-)(-)+.*\n)|((-)(-)+.*\r))/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:;)/i,/^(?:\()/i,/^(?:\))/i,/^(?:,)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:=)/i,/^(?:([0-9]+(\.)[0-9]+))/i,/^(?:([0-9]{4}[0-9]{2}[0-9]{2}))/i,/^(?:boolean\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:date\b)/i,/^(?:varchar\b)/i,/^(?:True\b)/i,/^(?:False\b)/i,/^(?:null\b)/i,/^(?:declare\b)/i,/^(?:default\b)/i,/^(?:set\b)/i,/^(?:select\b)/i,/^(?:table\b)/i,/^(?:create\b)/i,/^(?:alter\b)/i,/^(?:add\b)/i,/^(?:drop\b)/i,/^(?:rename\b)/i,/^(?:to\b)/i,/^(?:column\b)/i,/^(?:insert\b)/i,/^(?:into\b)/i,/^(?:["])/i,/^(?:[^"\\]+)/i,/^(?:\\")/i,/^(?:\\\\)/i,/^(?:\\n)/i,/^(?:\\r)/i,/^(?:\\t)/i,/^(?:\s)/i,/^(?:["])/i,/^(?:['])/i,/^(?:[^'\\]+)/i,/^(?:\\")/i,/^(?:\\\\)/i,/^(?:\\n)/i,/^(?:\\r)/i,/^(?:\\t)/i,/^(?:\s)/i,/^(?:['])/i,/^(?:values\b)/i,/^(?:from\b)/i,/^(?:where\b)/i,/^(?:update\b)/i,/^(?:truncate\b)/i,/^(?:delete\b)/i,/^(?:cast\b)/i,/^(?:if\b)/i,/^(?:then\b)/i,/^(?:begin\b)/i,/^(?:end\b)/i,/^(?:else\b)/i,/^(?:PRINT\b)/i,/^(?:CASE\b)/i,/^(?:WHEN\b)/i,/^(?:FOR\b)/i,/^(?:IN\b)/i,/^(?:WHILE\b)/i,/^(?:LOOP\b)/i,/^(?:BREAK\b)/i,/^(?:CONTINUE\b)/i,/^(?:FUNCTION\b)/i,/^(?:RETURN\b)/i,/^(?:PROCEDURE\b)/i,/^(?:LOWER\b)/i,/^(?:UPPER\b)/i,/^(?:ROUND\b)/i,/^(?:LEN\b)/i,/^(?:TYPEOF\b)/i,/^(?:AS\b)/i,/^(?:AND\b)/i,/^(?:OR\b)/i,/^(?:NOT\b)/i,/^(?:RETURNS\b)/i,/^(?:\.)/i,/^(?:([0-9]+))/i,/^(?:((@)[a-zA-Z][a-zA-Z0-9_]*))/i,/^(?:([a-zA-Z][a-zA-Z0-9_]*))/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"comentario_mul":{"rules":[],"inclusive":false},"comentario":{"rules":[],"inclusive":false},"string_s":{"rules":[52,53,54,55,56,57,58,59],"inclusive":false},"string":{"rules":[43,44,45,46,47,48,49,50],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,51,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Parser;
exports.Parser = Parser.Parser;
exports.parse = function () { return Parser.parse.apply(Parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}